name: Analyse Hippique GPI v5.1

on:
  workflow_dispatch:
    inputs:
      snapshot:
        description: "Type de snapshot à traiter (H-30 ou H-5)"
        default: "H-5"
        required: true
      data_dir:
        description: "Dossier des snapshots JSON (ex: data)"
        default: "data"
        required: true
      outdir:
        description: "Dossier de sortie (ex: out)"
        default: "out"
        required: true
      payout_calib_path:
        description: "Chemin vers payout_calibration.yaml (ex: configs/payout_calibration.yaml)"
        default: "configs/payout_calibration.yaml"
        required: false
      reunion:
        description: "Ex: R1 (optionnel)"
        required: false
      course:
        description: "Ex: C2 (optionnel)"
        required: false
      reunion_url:
        description: "URL ZEturf de la réunion pour lancer le fetch (optionnel)"
        required: false
      auto_combined:
        description: "Activer la recherche automatique d'un combiné EV+ (true/false)"
        default: "true"
        required: false
  # ⚠️ Les horaires ci-dessous sont en UTC. Adapte selon tes réunions cibles.
  schedule:
    # Exemple: 14:25 UTC ≈ 16:25 Paris (été) → H-30
    - cron: "25 14 * * *"
    # Exemple: 14:55 UTC ≈ 16:55 Paris (été) → H-5
    - cron: "55 14 * * *"

env:
  TZ: Europe/Paris
  GPI_BUDGET: "5"

jobs:
  gpi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pandas numpy

      - name: Arbo & variables
        shell: bash
        run: |
          mkdir -p "${ github.workspace }/${ inputs.data_dir }"
          mkdir -p "${ github.workspace }/${ inputs.outdir }"
          echo "SNAPSHOT=${ inputs.snapshot }" >> $GITHUB_ENV
          echo "DATA_DIR=${ inputs.data_dir }" >> $GITHUB_ENV
          echo "OUTDIR=${ inputs.outdir }" >> $GITHUB_ENV
          echo "PAYOUT_CALIB=${ inputs.payout_calib_path }" >> $GITHUB_ENV
          echo "REU=${ inputs.reunion }" >> $GITHUB_ENV
          echo "CRS=${ inputs.course }" >> $GITHUB_ENV
          echo "REUNION_URL=${ inputs.reunion_url }" >> $GITHUB_ENV
          echo "AUTO_COMBINED=${ inputs.auto_combined }" >> $GITHUB_ENV

      - name: (Optionnel) Fetch ZEturf H-30/H-5
        if: ${ inputs.reunion_url != '' }
        run: |
          echo ">>> Lancement du fetch depuis $REUNION_URL"
          python online_fetch_zeturf.py --reunion-url "$REUNION_URL" --data-dir "$DATA_DIR" --snapshot "$SNAPSHOT"
        env:
          REUNION_URL: ${ env.REUNION_URL }
          DATA_DIR: ${ env.DATA_DIR }
          SNAPSHOT: ${ env.SNAPSHOT }

      - name: Run runner (réunion complète ou course ciblée)
        shell: bash
        run: |
          set -euo pipefail
          EXTRA=""
          if [[ -n "${ env.REU }" ]]; then EXTRA="$EXTRA --reunion ${ env.REU }"; fi
          if [[ -n "${ env.CRS }" ]]; then EXTRA="$EXTRA --course ${ env.CRS }"; fi
          if [[ "${ env.AUTO_COMBINED }" == "true" ]]; then EXTRA="$EXTRA --auto-combined"; fi
          if [[ -n "${ env.PAYOUT_CALIB }" ]]; then EXTRA="$EXTRA --payout-calib ${ env.PAYOUT_CALIB }"; fi

          echo ">>> Commande:"
          echo "python runner_jour.py --snapshot ${ env.SNAPSHOT } --data-dir ${ env.DATA_DIR } --outdir ${ env.OUTDIR } $EXTRA"
          python runner_jour.py --snapshot "${ env.SNAPSHOT }" --data-dir "${ env.DATA_DIR }" --outdir "${ env.OUTDIR }" $EXTRA

      - name: Upload résultats (tickets + rapports)
        uses: actions/upload-artifact@v4
        with:
          name: gpi-results
          path: |
            ${ env.OUTDIR }/
            **/tickets.json
            **/ev_report.json
            **/postcourse.csv
            **/*.log
          if-no-files-found: warn
