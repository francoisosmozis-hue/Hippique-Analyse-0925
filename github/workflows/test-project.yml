name: üß™ Test & Validation du Projet

# D√©clencheurs
on:
  # D√©clench√© manuellement depuis l'onglet Actions
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Niveau de test'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic      # Tests de base uniquement
          - full       # Tests complets
          - structure  # Validation structure seulement
      
      run_lint:
        description: 'Lancer le linter sur sources.txt'
        required: false
        type: boolean
        default: true
  
  # D√©clench√© √† chaque push sur main (optionnel)
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'config/**'
      - 'requirements.txt'
      - '.github/workflows/**'
  
  # D√©clench√© sur les pull requests
  pull_request:
    branches:
      - main

# Variables d'environnement globales
env:
  PYTHON_VERSION: '3.12'
  TZ: 'Europe/Paris'

jobs:
  # ============================================
  # JOB 1: Validation de la structure
  # ============================================
  validate-structure:
    name: üìÅ Valider la structure du projet
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
      
      - name: üîç V√©rifier les fichiers critiques
        run: |
          echo "üîç V√©rification des fichiers obligatoires..."
          
          # Liste des fichiers critiques
          CRITICAL_FILES=(
            "sources.txt"
            "requirements.txt"
            ".env.example"
            "config/sources.yml"
            "README.md"
          )
          
          # Liste des dossiers critiques
          CRITICAL_DIRS=(
            "scripts"
            "config"
            "calibration"
            "data"
            "excel"
            ".github/workflows"
          )
          
          MISSING_FILES=()
          MISSING_DIRS=()
          
          # V√©rifier les fichiers
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Fichier manquant: $file"
              MISSING_FILES+=("$file")
            else
              echo "‚úÖ Trouv√©: $file"
            fi
          done
          
          # V√©rifier les dossiers
          for dir in "${CRITICAL_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Dossier manquant: $dir"
              MISSING_DIRS+=("$dir")
            else
              echo "‚úÖ Trouv√©: $dir/"
            fi
          done
          
          # Rapport final
          if [ ${#MISSING_FILES[@]} -eq 0 ] && [ ${#MISSING_DIRS[@]} -eq 0 ]; then
            echo ""
            echo "‚úÖ Structure du projet valide!"
          else
            echo ""
            echo "‚ùå Structure du projet invalide!"
            echo "Fichiers manquants: ${#MISSING_FILES[@]}"
            echo "Dossiers manquants: ${#MISSING_DIRS[@]}"
            exit 1
          fi
      
      - name: üîç V√©rifier sources.txt
        run: |
          echo "üîç Validation de sources.txt..."
          
          if [ ! -f "sources.txt" ]; then
            echo "‚ùå sources.txt n'existe pas!"
            exit 1
          fi
          
          # Compter les lignes non vides et non comment√©es
          URL_COUNT=$(grep -v '^#' sources.txt | grep -v '^$' | wc -l)
          
          echo "üìä Nombre d'URLs trouv√©es: $URL_COUNT"
          
          if [ $URL_COUNT -eq 0 ]; then
            echo "‚ö†Ô∏è Attention: sources.txt est vide ou ne contient que des commentaires"
            echo "   Ajoutez des URLs ZEturf pour les tests"
          else
            echo "‚úÖ sources.txt contient $URL_COUNT URL(s)"
            echo ""
            echo "URLs trouv√©es:"
            grep -v '^#' sources.txt | grep -v '^$' | head -5
          fi
      
      - name: üìä R√©sum√© de la structure
        run: |
          echo "üìä R√âSUM√â DE LA STRUCTURE"
          echo "========================="
          echo ""
          tree -L 2 -I '__pycache__|*.pyc|venv|.git' || ls -R

  # ============================================
  # JOB 2: Installation et d√©pendances
  # ============================================
  test-installation:
    name: üîß Tester l'installation
    runs-on: ubuntu-latest
    needs: validate-structure
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
      
      - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ Mettre √† jour pip
        run: |
          python -m pip install --upgrade pip setuptools wheel
      
      - name: üì¶ Installer les d√©pendances
        run: |
          echo "üì¶ Installation des d√©pendances depuis requirements.txt..."
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "‚úÖ D√©pendances install√©es"
          else
            echo "‚ùå requirements.txt introuvable!"
            exit 1
          fi
      
      - name: üîç V√©rifier les imports critiques
        run: |
          echo "üîç Test des imports Python..."
          
          python << 'EOF'
          import sys
          
          critical_imports = [
              'pandas',
              'numpy',
              'requests',
              'yaml',
              'bs4',
              'openpyxl',
              'google.cloud.storage'
          ]
          
          failed = []
          
          for module in critical_imports:
              try:
                  __import__(module)
                  print(f"‚úÖ {module}")
              except ImportError as e:
                  print(f"‚ùå {module}: {e}")
                  failed.append(module)
          
          if failed:
              print(f"\n‚ùå {len(failed)} module(s) manquant(s): {', '.join(failed)}")
              sys.exit(1)
          else:
              print("\n‚úÖ Tous les imports critiques fonctionnent!")
          EOF
      
      - name: üìä Versions des packages
        run: |
          echo "üìä Versions install√©es:"
          pip list | grep -E "(pandas|numpy|requests|google-cloud-storage|fastapi|openpyxl|pyyaml|beautifulsoup4)"

  # ============================================
  # JOB 3: Validation des configurations
  # ============================================
  validate-configs:
    name: ‚öôÔ∏è Valider les configurations
    runs-on: ubuntu-latest
    needs: validate-structure
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üì¶ Installer PyYAML
        run: pip install pyyaml
      
      - name: üîç Valider config/sources.yml
        run: |
          echo "üîç Validation de config/sources.yml..."
          
          python << 'EOF'
          import yaml
          import sys
          
          try:
              with open('config/sources.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              # V√©rifier la structure
              if 'zeturf' not in config:
                  print("‚ùå Cl√© 'zeturf' manquante dans sources.yml")
                  sys.exit(1)
              
              if 'url' not in config['zeturf']:
                  print("‚ùå Cl√© 'url' manquante dans sources.yml['zeturf']")
                  sys.exit(1)
              
              url = config['zeturf']['url']
              
              if '{course_id}' not in url:
                  print("‚ö†Ô∏è Placeholder {course_id} absent dans l'URL")
              
              print("‚úÖ config/sources.yml est valide")
              print(f"   URL template: {url}")
              
          except FileNotFoundError:
              print("‚ùå config/sources.yml introuvable!")
              sys.exit(1)
          except yaml.YAMLError as e:
              print(f"‚ùå Erreur YAML: {e}")
              sys.exit(1)
          EOF
      
      - name: üîç Valider .env.example
        run: |
          echo "üîç Validation de .env.example..."
          
          if [ ! -f ".env.example" ]; then
            echo "‚ùå .env.example introuvable!"
            exit 1
          fi
          
          # Variables obligatoires √† v√©rifier
          REQUIRED_VARS=(
            "GCS_BUCKET"
            "GCS_SERVICE_KEY_B64"
            "ZETURF_LOGIN"
            "ZETURF_PASSWORD"
          )
          
          MISSING_VARS=()
          
          for var in "${REQUIRED_VARS[@]}"; do
            if ! grep -q "^$var=" .env.example; then
              echo "‚ùå Variable manquante: $var"
              MISSING_VARS+=("$var")
            else
              echo "‚úÖ Variable trouv√©e: $var"
            fi
          done
          
          if [ ${#MISSING_VARS[@]} -eq 0 ]; then
            echo "‚úÖ .env.example contient toutes les variables obligatoires"
          else
            echo "‚ùå Variables manquantes: ${MISSING_VARS[@]}"
            exit 1
          fi

  # ============================================
  # JOB 4: Linter sources.txt
  # ============================================
  lint-sources:
    name: üîç Lint sources.txt
    runs-on: ubuntu-latest
    needs: test-installation
    if: ${{ github.event.inputs.run_lint != 'false' }}
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üì¶ Installer d√©pendances
        run: |
          pip install requests validators pyyaml
      
      - name: üîç Linter sources.txt
        run: |
          if [ -f "scripts/lint_sources.py" ]; then
            echo "üîç Ex√©cution du linter..."
            python scripts/lint_sources.py --file sources.txt --warn-only
          else
            echo "‚ö†Ô∏è scripts/lint_sources.py non trouv√©, cr√©ation d'un linter basique..."
            
            python << 'EOF'
          import re
          import sys
          
          def validate_sources():
              errors = []
              warnings = []
              
              with open('sources.txt', 'r') as f:
                  lines = f.readlines()
              
              urls = []
              for i, line in enumerate(lines, 1):
                  line = line.strip()
                  
                  # Ignorer commentaires et lignes vides
                  if not line or line.startswith('#'):
                      continue
                  
                  # V√©rifier format URL
                  if not line.startswith('https://www.zeturf.fr/'):
                      errors.append(f"Ligne {i}: URL invalide (doit commencer par https://www.zeturf.fr/)")
                  
                  # V√©rifier doublons
                  if line in urls:
                      warnings.append(f"Ligne {i}: URL dupliqu√©e: {line}")
                  
                  urls.append(line)
              
              # Rapport
              print(f"üìä {len(urls)} URL(s) trouv√©e(s)")
              
              if warnings:
                  print(f"\n‚ö†Ô∏è {len(warnings)} avertissement(s):")
                  for w in warnings:
                      print(f"  {w}")
              
              if errors:
                  print(f"\n‚ùå {len(errors)} erreur(s):")
                  for e in errors:
                      print(f"  {e}")
                  return False
              
              print("\n‚úÖ sources.txt est valide!")
              return True
          
          if not validate_sources():
              sys.exit(1)
          EOF
          fi

  # ============================================
  # JOB 5: Tests unitaires basiques
  # ============================================
  basic-tests:
    name: üß™ Tests basiques
    runs-on: ubuntu-latest
    needs: test-installation
    if: ${{ github.event.inputs.test_level != 'structure' }}
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üì¶ Installer d√©pendances
        run: |
          pip install -r requirements.txt
      
      - name: üß™ Test imports des scripts
        run: |
          echo "üß™ Test des imports des scripts..."
          
          for script in scripts/*.py; do
            if [ -f "$script" ]; then
              echo "V√©rification: $script"
              python -m py_compile "$script" && echo "  ‚úÖ $script" || echo "  ‚ùå $script"
            fi
          done
      
      - name: üß™ Test syntaxe Python
        run: |
          echo "üß™ V√©rification syntaxe Python de tous les fichiers..."
          find . -name "*.py" -not -path "./venv/*" -not -path "./.git/*" | while read file; do
            python -m py_compile "$file" && echo "‚úÖ $file" || (echo "‚ùå $file" && exit 1)
          done

  # ============================================
  # JOB 6: R√©sum√© final
  # ============================================
  test-summary:
    name: üìä R√©sum√© des tests
    runs-on: ubuntu-latest
    needs: [validate-structure, test-installation, validate-configs, basic-tests]
    if: always()
    
    steps:
      - name: üìä G√©n√©rer le r√©sum√©
        run: |
          echo "# üìä R√âSUM√â DES TESTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Structure | ${{ needs.validate-structure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Installation | ${{ needs.test-installation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ needs.validate-configs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests basiques | ${{ needs.basic-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-structure.result }}" == "success" ] && \
             [ "${{ needs.test-installation.result }}" == "success" ] && \
             [ "${{ needs.validate-configs.result }}" == "success" ]; then
            echo "## ‚úÖ Tous les tests critiques ont r√©ussi!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Certains tests ont √©chou√©" >> $GITHUB_STEP_SUMMARY
          fi
