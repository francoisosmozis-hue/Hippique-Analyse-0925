# ============================================================================
# Makefile - Orchestrateur Hippique Cloud Run
# ============================================================================
# Usage: make [target]
# ============================================================================

.PHONY: help setup deploy scheduler test logs clean

# Charger variables depuis .env
ifneq (,$(wildcard .env))
    include .env
    export
endif

# Couleurs
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

# Variables par d√©faut
PROJECT_ID ?= $(shell gcloud config get-value project)
REGION ?= europe-west1
SERVICE_NAME ?= horse-racing-orchestrator

help: ## Afficher l'aide
	@echo "$(BLUE)üê¥ Orchestrateur Hippique - Commandes disponibles$(NC)"
	@echo "=================================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

setup: ## Configuration initiale (APIs, SA, queue)
	@echo "$(BLUE)üîß Configuration initiale...$(NC)"
	@echo "Project: $(PROJECT_ID)"
	@echo "Region: $(REGION)"
	@echo ""
	@echo "$(YELLOW)Activation des APIs...$(NC)"
	@gcloud services enable \
		run.googleapis.com \
		cloudtasks.googleapis.com \
		cloudscheduler.googleapis.com \
		cloudbuild.googleapis.com \
		storage.googleapis.com \
		--project=$(PROJECT_ID)
	@echo "$(GREEN)‚úÖ APIs activ√©es$(NC)"
	@echo ""
	@echo "$(YELLOW)V√©rification Service Account...$(NC)"
	@if ! gcloud iam service-accounts describe $(SERVICE_NAME)@$(PROJECT_ID).iam.gserviceaccount.com --project=$(PROJECT_ID) 2>/dev/null; then \
		gcloud iam service-accounts create $(SERVICE_NAME) \
			--display-name="Horse Racing Orchestrator" \
			--project=$(PROJECT_ID); \
		echo "$(GREEN)‚úÖ Service Account cr√©√©$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Service Account existe$(NC)"; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ Setup termin√©$(NC)"

build: ## Build de l'image Docker localement
	@echo "$(BLUE)üî® Build local...$(NC)"
	docker build -t $(SERVICE_NAME):local .
	@echo "$(GREEN)‚úÖ Image build√©e: $(SERVICE_NAME):local$(NC)"

run-local: build ## Lancer le service localement
	@echo "$(BLUE)üöÄ D√©marrage local...$(NC)"
	docker run -p 8080:8080 \
		-e PROJECT_ID=$(PROJECT_ID) \
		-e REGION=$(REGION) \
		-e REQUIRE_AUTH=false \
		--env-file .env \
		$(SERVICE_NAME):local

deploy: ## D√©ployer sur Cloud Run
	@echo "$(BLUE)üöÄ D√©ploiement Cloud Run...$(NC)"
	@chmod +x scripts/deploy_cloud_run.sh
	@./scripts/deploy_cloud_run.sh
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(NC)"

deploy-fast: ## D√©ploiement sans rebuild (utilise derni√®re image)
	@echo "$(BLUE)‚ö° D√©ploiement rapide (sans rebuild)...$(NC)"
	@chmod +x scripts/deploy_cloud_run.sh
	@./scripts/deploy_cloud_run.sh --no-build
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(NC)"

scheduler: ## Cr√©er le job Scheduler quotidien 09:00
	@echo "$(BLUE)‚è∞ Configuration Scheduler...$(NC)"
	@chmod +x scripts/create_scheduler_0900.sh
	@./scripts/create_scheduler_0900.sh
	@echo "$(GREEN)‚úÖ Scheduler configur√©$(NC)"

test-local: ## Tests locaux (sans authentification)
	@echo "$(BLUE)üß™ Tests locaux...$(NC)"
	@chmod +x scripts/test_local.sh
	@./scripts/test_local.sh --no-auth

test-prod: ## Tests en production (avec authentification)
	@echo "$(BLUE)üß™ Tests production...$(NC)"
	@if [ -z "$(SERVICE_URL)" ]; then \
		echo "$(RED)‚ùå SERVICE_URL non d√©fini dans .env$(NC)"; \
		exit 1; \
	fi
	@chmod +x scripts/test_local.sh
	@./scripts/test_local.sh

logs: ## Afficher les logs Cloud Run (derni√®res 50 entr√©es)
	@echo "$(BLUE)üìã Logs Cloud Run...$(NC)"
	@gcloud logging read \
		"resource.type=cloud_run_revision AND resource.labels.service_name=$(SERVICE_NAME)" \
		--limit 50 \
		--format json \
		--project=$(PROJECT_ID)

logs-errors: ## Afficher uniquement les erreurs
	@echo "$(BLUE)üîç Erreurs uniquement...$(NC)"
	@gcloud logging read \
		"resource.type=cloud_run_revision AND resource.labels.service_name=$(SERVICE_NAME) AND severity>=ERROR" \
		--limit 30 \
		--format json \
		--project=$(PROJECT_ID)

logs-scheduler: ## Logs du Scheduler
	@echo "$(BLUE)üìÖ Logs Scheduler...$(NC)"
	@gcloud logging read \
		"resource.type=cloud_scheduler_job" \
		--limit 20 \
		--project=$(PROJECT_ID)

tasks-list: ## Lister les t√¢ches Cloud Tasks en attente
	@echo "$(BLUE)üìã T√¢ches en attente...$(NC)"
	@gcloud tasks list \
		--queue=horse-racing-queue \
		--location=$(REGION) \
		--project=$(PROJECT_ID)

scheduler-list: ## Lister les jobs Scheduler
	@echo "$(BLUE)üìÖ Jobs Scheduler...$(NC)"
	@gcloud scheduler jobs list \
		--location=$(REGION) \
		--project=$(PROJECT_ID)

trigger-schedule: ## D√©clencher manuellement le planning du jour
	@echo "$(BLUE)üéØ D√©clenchement manuel du planning...$(NC)"
	@if [ -z "$(SERVICE_URL)" ]; then \
		echo "$(RED)‚ùå SERVICE_URL non d√©fini dans .env$(NC)"; \
		exit 1; \
	fi
	@TOKEN=$$(gcloud auth print-identity-token --audiences=$(SERVICE_URL)); \
	curl -X POST \
		-H "Authorization: Bearer $$TOKEN" \
		-H "Content-Type: application/json" \
		-d '{"date":"today","mode":"tasks"}' \
		$(SERVICE_URL)/schedule | jq .
	@echo "$(GREEN)‚úÖ Planning d√©clench√©$(NC)"

trigger-scheduler-job: ## Ex√©cuter le job Scheduler manuellement
	@echo "$(BLUE)‚è∞ Ex√©cution manuelle du job Scheduler...$(NC)"
	@gcloud scheduler jobs run daily-plan-0900 \
		--location=$(REGION) \
		--project=$(PROJECT_ID)
	@echo "$(GREEN)‚úÖ Job ex√©cut√©$(NC)"

describe: ## Afficher les infos du service Cloud Run
	@echo "$(BLUE)‚ÑπÔ∏è  Informations du service...$(NC)"
	@gcloud run services describe $(SERVICE_NAME) \
		--region=$(REGION) \
		--project=$(PROJECT_ID)

url: ## Afficher l'URL du service
	@gcloud run services describe $(SERVICE_NAME) \
		--region=$(REGION) \
		--project=$(PROJECT_ID) \
		--format='value(status.url)'

status: ## Statut complet (service + tasks + scheduler)
	@echo "$(BLUE)üìä Statut complet$(NC)"
	@echo "=================================================="
	@echo ""
	@echo "$(YELLOW)Service Cloud Run:$(NC)"
	@gcloud run services describe $(SERVICE_NAME) \
		--region=$(REGION) \
		--project=$(PROJECT_ID) \
		--format='table(status.url,status.conditions[0].status,metadata.creationTimestamp)' 2>/dev/null || \
		echo "  $(RED)‚ùå Service non d√©ploy√©$(NC)"
	@echo ""
	@echo "$(YELLOW)Queue Cloud Tasks:$(NC)"
	@gcloud tasks queues describe horse-racing-queue \
		--location=$(REGION) \
		--project=$(PROJECT_ID) \
		--format='table(name,state)' 2>/dev/null || \
		echo "  $(RED)‚ùå Queue non cr√©√©e$(NC)"
	@echo ""
	@echo "$(YELLOW)T√¢ches en attente:$(NC)"
	@gcloud tasks list --queue=horse-racing-queue --location=$(REGION) --project=$(PROJECT_ID) \
		--format='table(name,scheduleTime)' 2>/dev/null || \
		echo "  Aucune t√¢che"
	@echo ""
	@echo "$(YELLOW)Jobs Scheduler:$(NC)"
	@gcloud scheduler jobs list --location=$(REGION) --project=$(PROJECT_ID) \
		--format='table(name,schedule,state)' 2>/dev/null || \
		echo "  $(RED)‚ùå Aucun job$(NC)"

clean-tasks: ## Supprimer toutes les t√¢ches en attente
	@echo "$(YELLOW)‚ö†Ô∏è  Suppression de toutes les t√¢ches...$(NC)"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		gcloud tasks queues purge horse-racing-queue \
			--location=$(REGION) \
			--project=$(PROJECT_ID); \
		echo "$(GREEN)‚úÖ T√¢ches supprim√©es$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  Annul√©$(NC)"; \
	fi

clean-scheduler: ## Supprimer le job Scheduler
	@echo "$(YELLOW)‚ö†Ô∏è  Suppression du job Scheduler...$(NC)"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		gcloud scheduler jobs delete daily-plan-0900 \
			--location=$(REGION) \
			--project=$(PROJECT_ID) \
			--quiet; \
		echo "$(GREEN)‚úÖ Job supprim√©$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  Annul√©$(NC)"; \
	fi

clean: clean-tasks ## Nettoyer (t√¢ches seulement)
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

destroy: ## Supprimer TOUT (service + queue + scheduler)
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: Suppression compl√®te !$(NC)"
	@read -p "Taper 'DELETE' pour confirmer: " confirm; \
	if [ "$$confirm" = "DELETE" ]; then \
		echo "$(YELLOW)Suppression du service...$(NC)"; \
		gcloud run services delete $(SERVICE_NAME) --region=$(REGION) --project=$(PROJECT_ID) --quiet || true; \
		echo "$(YELLOW)Suppression du scheduler...$(NC)"; \
		gcloud scheduler jobs delete daily-plan-0900 --location=$(REGION) --project=$(PROJECT_ID) --quiet || true; \
		echo "$(YELLOW)Suppression de la queue...$(NC)"; \
		gcloud tasks queues delete horse-racing-queue --location=$(REGION) --project=$(PROJECT_ID) --quiet || true; \
		echo "$(RED)‚úÖ Tout supprim√©$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  Annul√©$(NC)"; \
	fi

.DEFAULT_GOAL := help
