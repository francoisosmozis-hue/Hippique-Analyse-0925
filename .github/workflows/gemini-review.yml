name: Gemini Code Review (Dev API)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Optionnel : limiter le périmètre
    # paths:
    #   - "online_fetch_zeturf.py"
    #   - "runner_chain.py"
    #   - "pipeline_run.py"
    #   - "kelly.py"
    #   - "analyse_courses_du_jour_enrichie.py"
    #   - "scripts/**"
    #   - ".github/workflows/**"

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install google-genai

      - name: Run Gemini on PR diff
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GEMINI_MODEL: gemini-1.5-flash   # ou gemini-1.5-pro
        run: |
          python - << 'PY'
          import os, subprocess, pathlib
          from google import genai

          MODEL = os.getenv("GEMINI_MODEL","gemini-2.0-flash")
          KEEP_EXT = {".py",".yml",".yaml",".md",".sh",".toml",".json",".ini",".cfg"}
          EXCLUDE_DIRS = {".git",".venv","data","__pycache__","tests/__snapshots__",".github/workflows/cache"}
          MAX_CHARS = 38000

          def read_file_safe(p: pathlib.Path) -> str:
            try:
              if any(part in EXCLUDE_DIRS for part in p.parts): return ""
              if p.stat().st_size > 300_000: return ""
              txt = p.read_text(errors="ignore")
              if "\x00" in txt: return ""
              return txt[:MAX_CHARS]
            except Exception:
              return ""

          base = os.getenv("GITHUB_BASE_REF","main")
          try:
            diff = subprocess.check_output(
              ["bash","-lc",f"git diff --name-only origin/{base}...HEAD"], text=True
            ).splitlines()
          except Exception:
            diff = subprocess.check_output(
              ["bash","-lc","git diff --name-only HEAD~1...HEAD"], text=True
            ).splitlines()

          files = []
          for f in diff:
            p = pathlib.Path(f)
            if p.exists() and p.is_file() and ((p.suffix in KEEP_EXT) or (p.name=="Dockerfile")):
              files.append(p)

          body = [f"## Gemini review (Dev API, model: {MODEL})\n"]
          if not files:
            body.append("Aucun fichier pertinent modifié.")
          else:
            client = genai.Client()  # utilise GEMINI_API_KEY
            PROMPT = """Tu es un relecteur senior (Python/CI/GCP). Pour chaque fichier :
            1) Résume le rôle (1–2 lignes).
            2) Donne 3 risques clés (bug/perf/sécurité/robustesse I/O/réseau).
            3) Propose un patch minimal (diff unifié) si pertinent (sans casser les signatures publiques).
            4) Propose 1 test pytest court ciblé.
            Contexte: Projet Analyse Hippique GPI v5.1 (budget 5€, EV/ROI, H-30/H-5, calibration payouts, Kelly 60%, abstention si data manquante).
            Répond en Markdown concis et actionnable.
            """
            for p in files:
              content = read_file_safe(p)
              if not content:
                continue
              prompt = f"""{PROMPT}

              Fichier: `{p.as_posix()}`
              ```text
              {content}
              ```
              """
              print(f"[Gemini] Reviewing {p} ...")
              resp = client.models.generate_content(model=MODEL, contents=prompt)
              body.append(f"\n### `{p.as_posix()}`\n" + (getattr(resp, "text", None) or "_(pas de réponse)_"))

            # Synthèse
            synth_prompt = "Synthétise en 10 puces max les TODO P0/P1 transverses au diff."
            resp = client.models.generate_content(model=MODEL, contents="\n".join(body) + "\n" + synth_prompt)
            body.append("\n\n### Synthèse priorisée\n" + (getattr(resp, "text", None) or ""))

          pathlib.Path("GEMINI_PR_REVIEW.md").write_text("\n".join(body), encoding="utf-8")
          PY

      - name: Comment on PR (sticky)
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: GEMINI_PR_REVIEW.md
