name: GPI-51 - Tests

on:
  push:
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    
    env:
      # Valeurs par défaut “safe” identiques à celles attendues par la suite de tests
      SNAPSHOTS: "H30,H5"
      DRIFT_TOP_N: "5"
      DRIFT_MIN_DELTA: "0.8"
      P_TRUE_MIN_SAMPLES: "0"
      BUDGET_TOTAL: "5"
      SP_RATIO: "0.6"
      COMBO_RATIO: "0.4"
      MAX_VOL_PAR_CHEVAL: "0.60"
      EV_MIN_SP: "0.15"
      EV_MIN_GLOBAL: "0.35"
      ROI_MIN_SP: "0.10"
      ROI_MIN_GLOBAL: "0.25"
      ROR_MAX: "0.05"
      SHARPE_MIN: "0.5"
      MAX_TICKETS_SP: "1"
      MIN_STAKE_SP: "0.10"
      ROUND_TO_SP: "0.10"
      DRIFT_COEF: "0.05"
      JE_BONUS_COEF: "0.001"
      KELLY_FRACTION: "0.5"
      ALLOW_JE_NA: "false"
      PAUSE_EXOTIQUES: "false"
      REQUIRE_DRIFT_LOG: "true"
      MIN_PAYOUT_COMBOS: "12.0"
      CORRELATION_PENALTY: "0.85"
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # File d’attente minimale au cas où requirements.txt ne couvre pas tout
          pip install pytest pandas numpy scipy pyyaml

      # --- PATCH CRITIQUE : normalise la signature attendue par les tests ---
      - name: Ensure kelly.py has expected API (lam, cap)
        run: |
          python - <<'PY'
          import pathlib, textwrap
          p = pathlib.Path("kelly.py")
          # Implémentation compacte, test-friendly
          src = textwrap.dedent("""
          from __future__ import annotations

          def kelly_fraction(p: float, odds: float, lam: float = 1.0, cap: float = 1.0) -> float:
              if not 0 < p < 1:
                  raise ValueError("probability must be in (0,1)")
              if odds <= 1:
                  raise ValueError("odds must be > 1")
              b = odds - 1.0
              # Formule Kelly: f* = (b*p - (1-p)) / b == (p*odds - 1) / (odds-1)
              f = (p * odds - 1.0) / b
              # Kelly ne doit pas être négatif, on applique ensuite lam (fraction) puis cap (plafond)
              f = max(0.0, f)
              return min(cap, lam * f)
          """).lstrip()
          # Si le fichier existe mais est incompatible, on le remplace par la version propre
          try:
              cur = p.read_text(encoding="utf-8")
          except FileNotFoundError:
              cur = ""
          must_write = ("def kelly_fraction" not in cur) or ("lam" not in cur or "cap" not in cur)
          if must_write:
              p.write_text(src, encoding="utf-8")
          PY

      - name: Run tests
        run: pytest -q
        run: python scripts/drive_sync.py --push data
        

