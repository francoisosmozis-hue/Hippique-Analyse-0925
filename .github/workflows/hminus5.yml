name: H-5 analyse (no Drive)

on:
  workflow_dispatch:
    inputs:
      course_url:
        description: "URL Geny/ZEturf de la course"
        required: true
      rc_id:
        description: "Identifiant R?C? (ex: R4C3)"
        required: true
  repository_dispatch:
    types: [hminus5]
  schedule:
    - cron: "*/15 8-20 * * *"  # optionnel – scan toutes 15 min heures FR

permissions:
  contents: read
  actions: write

env:
  PYTHONUTF8: "1"
  TZ: "Europe/Paris"
  USE_GCS: "false"                # <— coupe GCS partout
  OUTPUT_DIR: out/hminus5         # <— dossier de sortie local
  EV_MIN_GLOBAL: "0.40"           # seuils GPI v5.1
  ROI_MIN_ESTIME: "0.20"
  BANKROLL_CAP: "5"               # plafond € / course
  GCS_BUCKET: ${{ vars.GCS_BUCKET || '' }}

jobs:
  build-run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Run H-5 analysis (no Drive)
        env:
          COURSE_URL: ${{ github.event.inputs.course_url || '' }}
          RC_ID: ${{ github.event.inputs.rc_id || '' }}
        run: |
          set -euo pipefail
          export OUTPUT_DIR="${OUTPUT_DIR}"
          export EV_MIN_GLOBAL="${EV_MIN_GLOBAL}"
          export ROI_MIN_ESTIME="${ROI_MIN_ESTIME}"
          export BANKROLL_CAP="${BANKROLL_CAP}"
          mkdir -p "${OUTPUT_DIR}"
          echo "→ H-5 run for ${RC_ID} ${COURSE_URL}"
          
          rc_source="${RC_ID:-}"
          if [ -z "${rc_source}" ] && [ -n "${COURSE_URL}" ]; then
            url_upper=$(printf '%s' "${COURSE_URL}" | tr '[:lower:]' '[:upper:]')
            if [[ "${url_upper}" =~ (R[0-9]+)C([0-9]+) ]]; then
              rc_source="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
            fi
          fi
          rc_clean=$(printf '%s' "${rc_source}" | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
          if [[ "${rc_clean}" =~ ^(R[0-9]+)(C[0-9]+)$ ]]; then
            reunion_label="${BASH_REMATCH[1]}"
            course_label="${BASH_REMATCH[2]}"
          else
            echo "[ERROR] Identifiant RC invalide: \"${RC_ID}\"" >&2
            exit 1
          fi
          analysis_dir="${OUTPUT_DIR}/${reunion_label}${course_label}"
          echo "→ Labels normalisés: ${reunion_label} ${course_label} (dir: ${analysis_dir})"
          echo "ANALYSIS_DIR=${analysis_dir}" >> "${GITHUB_ENV}"

          # 1) analyse & tickets (respect GPI v5.1 / budget 5€)
          python "${GITHUB_WORKSPACE}/analyse_courses_du_jour_enrichie.py" \
            --phase H5 \
            --reunion "${reunion_label}" \
            --course "${course_label}" \
            --data-dir "${OUTPUT_DIR}" \
            --budget "${BANKROLL_CAP}" \
            --kelly 1.0

          # 2) simulate EV (optionnel, rapide)
          python "${GITHUB_WORKSPACE}/simulate_ev.py" \
            --inputs "${analysis_dir}" \
            --out "${analysis_dir}/ev_report.json" || true

      - name: Guardrail EV/ROI
        run: |
          set -euo pipefail
          analysis_json="${ANALYSIS_DIR}/analysis_H5.json"
          if [ ! -f "${analysis_json}" ]; then
            echo "::error::analysis_H5.json introuvable dans ${ANALYSIS_DIR}" >&2
            exit 1
          fi
          python "${GITHUB_WORKSPACE}/scripts/guardrails.py" \
            --analysis "${analysis_json}" \
            --ev-min "${EV_MIN_GLOBAL}" \
            --roi-min "${ROI_MIN_ESTIME}" \
            --report "${ANALYSIS_DIR}/abstention.json"

      - name: Export normalized JSON/CSV
        if: env.ABSTAIN != 'true'
        run: |
          analysis_dir="${ANALYSIS_DIR}"
          if [ ! -f "${analysis_dir}/p_finale.json" ]; then
            echo "[ERROR] p_finale.json introuvable dans ${analysis_dir}" >&2
            ls -al "${analysis_dir}" || true
            exit 1
          fi

          python "${GITHUB_WORKSPACE}/p_finale_export.py" \
            --outputs-dir "${analysis_dir}"

      - name: Upload artifacts (JSON, CSV, DOCX, logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hminus5-${{ github.run_id }}
          path: |
            ${{ env.OUTPUT_DIR }}/**/analysis_H5.json
            ${{ env.OUTPUT_DIR }}/**/per_horse_report.csv
            ${{ env.OUTPUT_DIR }}/**/tracking.csv
            ${{ env.OUTPUT_DIR }}/**/abstention.json
            out/hminus5/**
            !**/__pycache__/**

      # OPTION A — Commit sur branche data (sans Drive)
      - name: Commit to data branch
        if: ${{ env.ABSTAIN != 'true' && github.ref == 'refs/heads/main' }}
        uses: EndBug/add-and-commit@v9
        with:
          add: "out/hminus5"
          message: "H-5: export sans Drive (${{ github.run_id }})"
          new_branch: "data-hminus5"
          push: true
