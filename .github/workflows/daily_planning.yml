name: Daily Planning (H-30 + Plan H-5)

on:
  workflow_dispatch:
    inputs:
      reunion_urls:
        description: "Liste multiligne d'URL de réunions à planifier."
        required: false
        type: string
  schedule:
    - cron: "30 6 * * *"
    - cron: "30 7 * * *"

permissions:
  contents: read

env:
  PYTHONUTF8: "1"
  TZ: "Europe/Paris"
  OUT_DIR: "out/planning"
  PLAN_DIR: "~/.cache/analyse-hippique"

concurrency:
  group: daily-planning-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  plan:      
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && pip install -r requirements.txt
      - name: Compute cache key (date)
        id: key
        run: echo "PLAN_KEY=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"
      - name: Prepare OUT directories
        run: |
          mkdir -p "${OUT_DIR}"
          mkdir -p "${PLAN_DIR}"
      - name: Build reunion list
        id: targets
        shell: bash .
        run: |
          set -euo pipefail
          if [ -n "${{ inputs.reunion_urls }}" ]; then
            echo "${{ inputs.reunion_urls }}" | sed '/^$/d' > "${OUT_DIR}/reunions.txt"
          else
            echo "Aucune réunion fournie."
            exit 78
          fi
          echo "list=${OUT_DIR}/reunions.txt" >> "$GITHUB_OUTPUT"
      - name: Run H-30 for each reunion (optional)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            python analyse_courses_du_jour_enrichie.py \
              --reunion-url "$url" \
              --phase H30 \
              --out-dir "${OUT_DIR}/h30" || true
          done < "${{ steps.targets.outputs.list }}"
      - name: Build H-5 plan (courses + schedule)
        run: |
          python - <<'PY'
import json, os, glob, datetime
from pathlib import Path
PLAN_DIR = Path(os.path.expanduser("~/.cache/analyse-hippique")); PLAN_DIR.mkdir(parents=True, exist_ok=True)
plan_path = PLAN_DIR / "h5_targets.json"
def extract_courses(base="out/planning/h30"):
    urls=set()
    for f in glob.glob(f"{base}/**/*.json", recursive=True):
        try:
            data=json.load(open(f, encoding="utf-8"))
        except Exception:
            continue
        if isinstance(data, dict):
            if "courses" in data and isinstance(data["courses"], list):
                for c in data["courses"]:
                    u=(c.get("url") or c.get("course_url") or "")
                    if "/course/" in u: urls.add(u)
            for v in data.values():
                if isinstance(v,str) and "/course/" in v: urls.add(v)
    return sorted(urls)
plan=[{"course_url":u,"scheduled":None} for u in extract_courses()]
json.dump({"date": datetime.date.today().isoformat(), "targets": plan}, open(plan_path,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
print(f"Wrote {plan_path}")
PY
      - uses: actions/cache/save@v4
        with:
          path: ~/.cache/analyse-hippique
          key: h5-plan-${{ steps.key.outputs.PLAN_KEY }}
