name: run-hippiques

on:
  workflow_dispatch:
    inputs:
      phase:
        description: "Phase d'analyse (H30 ou H5)"
        required: true
        default: "H5"
        type: choice
        options: [H30, H5]
      course_url:
        description: "URL ZEturf de la course (ex: https://www.zeturf.fr/fr/course/2025-09-06/R1C2-vincennes)"
        required: true
        type: string

  # Exemple de planification quotidienne (UTC). 07:30 UTC = 09:30 Paris (été)
  schedule:
    - cron: "30 7 * * *"

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.course_url || 'scheduled' }}
  cancel-in-progress: false

env:
  TZ: Europe/Paris
  PYTHONUNBUFFERED: "1"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth via Workload Identity Federation (GCP)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Who am I (sanity)
        run: |
          gcloud auth list
          gcloud config set project analyse-hippique
          gcloud config list

      - name: Setup Python 3.11 + cache pip
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (si requirements.txt présent)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "no requirements.txt"; fi

      # ---- Lancement pipeline GPI v5.1 ----
      # H30: snapshot uniquement
      # H5 : snapshot + JE + Chronos + p_finale + pipeline + prompt
      - name: Run analyse_courses_du_jour_enrichie.py
        run: |
          set -euo pipefail
          PHASE="${{ inputs.phase }}"
          COURSE_URL="${{ inputs.course_url }}"
          if [ -z "$COURSE_URL" ]; then
            echo "No course_url provided (manual run) — skipping"; exit 1
          fi
          echo "Phase=$PHASE  Course=$COURSE_URL"
          
          PARSED=$(printf '%s\n' "$COURSE_URL" | sed -nE 's#.*/(R[0-9]+)C([0-9]+).*#\1 C\2#p' | head -n1)
          if [ -z "$PARSED" ]; then
            echo "Unable to determine reunion/course identifiers from URL '$COURSE_URL' (expected pattern R?C?)." >&2
            exit 1
          fi

          REUNION=$(printf '%s\n' "$PARSED" | awk '{print $1}')
          COURSE=$(printf '%s\n' "$PARSED" | awk '{print $2}')
          echo "Reunion=$REUNION  Course=$COURSE"

          python analyse_courses_du_jour_enrichie.py \
            --phase "$PHASE" \
            --reunion "$REUNION" \
            --course "$COURSE" \
            --budget 5.0 \
            --kelly 0.4

      # (Optionnel) Lancer runner_chain directement si tu préfères, ex:
      # - name: Runner H-5 direct (exemple)
      #   if: ${{ inputs.phase == 'H5' }}
      #   run: |
      #     python runner_chain.py --reunion R1 --course C2 --phase H5 --budget 5 --kelly-frac 0.4 --allow-heuristic

      - name: List outputs
        run: |
          echo "== data =="
          (ls -R data || true) | sed -e 's,^,  ,'
          echo "== prompts =="
          (ls -R prompts || true) | sed -e 's,^,  ,'

      - name: Upload artifacts (data + prompts)
        uses: actions/upload-artifact@v4
        with:
          name: hippiques-${{ github.run_id }}-${{ inputs.phase }}
          path: |
            data/**
            prompts/**
          if-no-files-found: warn
